/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.wfms.webapp.common.datastat;

import java.io.PrintWriter;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONObject;

import org.apache.commons.beanutils.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;


import com.wfms.common.util.JSONUtil;
import com.wfms.constant.DataStatConstant;
import com.wfms.model.common.datastat.StatDefineEntity;
import com.wfms.webapp.common.datastat.attribute.StatConditionBean;
import com.wfms.webapp.common.datastat.attribute.StatViewBean;
import com.wfms.webapp.common.datastat.attribute.v3.FusionChart;
import com.wfms.webapp.common.datastat.attribute.v3.FusionChartDto;
import com.wfms.webapp.common.datastat.util.StatUtil;

@Controller
@RequestMapping("/common/dataStatAction.do")
public class CommonStatAction{
	
	private StatUtil dataStatUtil=null;

	@Autowired
	public void setDataStatUtil(StatUtil dataStatUtil) {
		this.dataStatUtil = dataStatUtil;
	}
	
	@RequestMapping(params="method=toStat")
	public String forwardStat(){
		return "/common/function/dataStat";
	}
	
	@RequestMapping(params="method=getAllStatTable")
	@ResponseBody
	public List<StatDefineEntity> getAllStatTable(){
		List<StatDefineEntity> allStatDefine = null;
		allStatDefine = dataStatUtil.getAllStatDefine();
		return allStatDefine;
	}
	
	@RequestMapping(params="method=getStatDefined")
	@ResponseBody
	public StatDefineEntity getStatDefined(@RequestParam("tableName") String tableName){
		StatDefineEntity statDefine = dataStatUtil.getStatDefine(tableName);
		return statDefine;
	}
	
	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	@RequestMapping
	public ModelAndView execute(HttpServletRequest request, HttpServletResponse response)  throws Exception{

		response.setCharacterEncoding("UTF-8");
		PrintWriter out = response.getWriter();
		
		String statCategory=request.getParameter("statCategory");
		String statObj=request.getParameter("statObj");
		String tableName = request.getParameter("tableName");
		String statViewName = request.getParameter("statViewName");
		 
		statViewName = "(select id, dqszj, xz, xsxx.bzrxm, bzr2xm, xsbh, xh, xm, cym, xb, csrq, sfswyxmz, mz, jg, sfzh, sfdty, zzmm, hkszd, hkxz, byxx, whcd, cbdxx, ywj, bysj, dyzy, dezy, jtxxdz, jtyzbm, jtrjsr, jtnzsr, srly, sfdb, xztxdz, xzyzbm, dzyx, qq, dhhm, sjhm, zp, yhkh, ahtc, bz, xsxx.sfby, sjzt, lzhzlx, lzhzxxjgdm, sfxsgjzxj, gjzxjyffbz, xxlx, sjdzzcxjh, sfgatqb, zslx, bmzt, rxfsdm, jdfsdm, xslbdm, xslydm, syd, rxny, bjid, zyjbdm, lxr, lxrdh, sx, bmsj, jtlxr, jtlxdh, zylbdm," +
				"bjdm.zyid zyid,bjdm.bjmc,bjdm.bjjc,zydm.zymc,zydm.zyjc"
						+" from zsjygl_zsgl_xsjbxxb xsxx inner join bjdmb bjdm"
						+" on xsxx.bjid=bjdm.id"
						+" inner join zydmb zydm"
						+" on zydm.id=bjdm.zyid)";
		String rowKey = request.getParameter("row");
		String columnKey = request.getParameter("column");
		
		statCategory = java.net.URLDecoder.decode(statCategory, "UTF-8");
		statObj = java.net.URLDecoder.decode(statObj, "UTF-8");
		
		String conditions = request.getParameter("conditions") ;
		
		StatConditionBean condBean = new StatConditionBean();
		condBean.setColumnKeyType(columnKey);
		condBean.setRowKeyType(rowKey);
		condBean.setCondition(conditions);
		condBean.setStatViewName(statViewName);
		condBean.setTableName(tableName);
		
		StatViewBean statView = new StatViewBean();
		if("".equals(rowKey) || "".equals(columnKey))
		{
			statView.getAjaxMsg().setSuccess(false);
			statView.getAjaxMsg().setMessage("未选定统计对象或统计分类");
			JSONObject msgObj = JSONUtil.formatObject(statView);
			out.println(msgObj);
			return null;
		}
		try{
			dataStatUtil.initStatUtil(condBean);
		}catch(Exception e)
		{
			statView.getAjaxMsg().setSuccess(false);
			statView.getAjaxMsg().setMessage("未查到有效数据，无法统计");
			JSONObject msgObj = JSONUtil.formatObject(statView);
			out.println(msgObj);
			return null;
		}
		statView.getAjaxMsg().setSuccess(true);
		dataStatUtil.createBarChart(request,"");
		dataStatUtil.createPieChart(request,statObj+"统计");
		dataStatUtil.createPieItemChart(request,statCategory+"分类统计");
		dataStatUtil.pushDataToScope(null,statObj+"\\"+statCategory,request);
		
		statView.setBarReportURI(String.valueOf(request.getAttribute(DataStatConstant.BAR_REPORT_URI)));
		statView.setPieColumnReportURI(String.valueOf(request.getAttribute(DataStatConstant.PIECOLUMN_REPORT_URI)));
		statView.setPieRowReportURI(String.valueOf(request.getAttribute(DataStatConstant.PIEROW_REPORT_URI)));
		JSONObject msgObj = JSONUtil.formatObject(statView);
		out.println(msgObj);
		return null;
	}
	
	@RequestMapping(params="type=fusion.xml")
	@ResponseBody
	public StatViewBean fusionChart(HttpServletRequest request, HttpServletResponse response)  throws Exception{
		response.setCharacterEncoding("UTF-8");
		
		String statCategory=request.getParameter("statCategory");
		String statObj=request.getParameter("statObj");
		String tableName = request.getParameter("tableName");
		String statViewName = request.getParameter("statViewName");
		 
		statViewName = "(select id, dqszj, xz, xsxx.bzrxm, bzr2xm, xsbh, xh, xm, cym, xb, csrq, sfswyxmz, mz, jg, sfzh, sfdty, zzmm, hkszd, hkxz, byxx, whcd, cbdxx, ywj, bysj, dyzy, dezy, jtxxdz, jtyzbm, jtrjsr, jtnzsr, srly, sfdb, xztxdz, xzyzbm, dzyx, qq, dhhm, sjhm, zp, yhkh, ahtc, bz, xsxx.sfby, sjzt, lzhzlx, lzhzxxjgdm, sfxsgjzxj, gjzxjyffbz, xxlx, sjdzzcxjh, sfgatqb, zslx, bmzt, rxfsdm, jdfsdm, xslbdm, xslydm, syd, rxny, bjid, zyjbdm, lxr, lxrdh, sx, bmsj, jtlxr, jtlxdh, zylbdm," +
				"bjdm.zyid zyid,bjdm.bjmc,bjdm.bjjc,zydm.zymc,zydm.zyjc"
						+" from zsjygl_zsgl_xsjbxxb xsxx inner join bjdmb bjdm"
						+" on xsxx.bjid=bjdm.id"
						+" inner join zydmb zydm"
						+" on zydm.id=bjdm.zyid)";
		String rowKey = request.getParameter("row");
		String columnKey = request.getParameter("column");
		
		statCategory = java.net.URLDecoder.decode(statCategory, "UTF-8");
		statObj = java.net.URLDecoder.decode(statObj, "UTF-8");
		
		String conditions = request.getParameter("conditions") ;
		
		StatConditionBean condBean = new StatConditionBean();
		condBean.setColumnKeyType(columnKey);
		condBean.setRowKeyType(rowKey);
		condBean.setCondition(conditions);
		condBean.setStatViewName(statViewName);
		condBean.setTableName(tableName);
		condBean.setStatTarget(statObj);
		condBean.setStatCategory(statCategory);
		StatViewBean statView = new StatViewBean();
		if("".equals(rowKey) || "".equals(columnKey))
		{
			statView.getAjaxMsg().setSuccess(false);
			statView.getAjaxMsg().setMessage("未选定统计对象或统计分类");
			return statView;
		}
		try{
			dataStatUtil.initStatUtil(condBean);
		}catch(Exception e)
		{
			statView.getAjaxMsg().setSuccess(false);
			statView.getAjaxMsg().setMessage("未查到有效数据，无法统计");
			return statView;
		}
		statView.getAjaxMsg().setSuccess(true);
		statView.setFusionChart(dataStatUtil.createFusionBar("招生信息统计"));
		dataStatUtil.pushDataToScope(null,statObj+"\\"+statCategory,request);
		return statView;
	}
	
	@RequestMapping(params="type=fusion.json")
	@ResponseBody
	public FusionChartDto v3fusionChart(HttpServletRequest request,
			HttpServletResponse response,
			StatConditionBean condBean)  throws Exception{
		response.setCharacterEncoding("UTF-8");
		
		String statViewName = dataStatUtil.getStatDefine(condBean.getTableName()).getSql();
		condBean.setStatViewName("("+statViewName+")");
		StatViewBean statView = new StatViewBean();
		if("".equals(condBean.getRowKeyType()) || "".equals(condBean.getColumnKeyType()))
		{
			statView.getAjaxMsg().setSuccess(false);
			statView.getAjaxMsg().setMessage("未选定统计对象或统计分类");
			return null;
		}
		try{
			dataStatUtil.initStatUtil(condBean);
		}catch(Exception e)
		{
			statView.getAjaxMsg().setSuccess(false);
			statView.getAjaxMsg().setMessage("未查到有效数据，无法统计");
			return null;
		}
		statView.getAjaxMsg().setSuccess(true);
		FusionChart chart = dataStatUtil.createFusionChart("招生信息统计");
		dataStatUtil.pushDataToScope(null,condBean.getStatTarget()+"\\"+condBean.getStatCategory(),request);
		FusionChartDto chartDto = new FusionChartDto();
		chartDto.setChart(chart);
		
		FusionChart categoryChart = new FusionChart();
		BeanUtils.copyProperties(categoryChart, chart);
		categoryChart.setData(chart.getCategoryData());
		chartDto.setCategoryChart(categoryChart);
		return chartDto;
	}
}